
import sys
import pandas as pd
import re
import pyfaidx

# python scripts/argsample_sites_file.py X 12000000 12100000 tmp.sites steps/male_x_haploids/S_Hazara-*.fa 

script, chrom, start, end, output_file, *fasta_files = sys.argv
start, end = int(start), int(end)

names = [re.search('([^/]+)-A.fa$', f).group(1) for f in fasta_files]

# create a dataframe with all the bases
df = pd.DataFrame()
for name, fasta_file in zip(names, fasta_files):
    fasta_index = pyfaidx.Fasta(fasta_file, 
                                strict_bounds=True, 
                                one_based_attributes=False)
    seq = fasta_index[chrom][start:end].seq                                     
    df[name] = list(seq)

# offset positions window by start so they become genomic coordinates
df.index += start

with open(output_file, 'w') as f:
    print("NAMES\t" + "\t".join(names), file=f)
    print(f"REGION\t{chrom}\t{start}\t{end}", file=f)
    for tup in df.itertuples(index=True):
        pos = tup[0]
        bases = tup[1:]
        print(f'{pos}\t' + ''.join(bases), file=f)

    # for pos, row in df.iterrows():
    #     print(pos, ''.join(row), file=f)

# NAMES   NA06984 NA06985 NA06986 NA06989 NA06994 NA07000 NA07037 NA07048 NA07051 NA07056 NA07347 NA07357 NA10847 NA10851 NA11829 NA11830 NA11831 NA11832 NA11840 NA11843 NA11881 NA11892 NA11893 NA11894 NA11918 NA11919 NA11920 NA11930 NA11931 NA11932 NA11933 NA11992 NA11994 NA11995 NA12003 NA12004 NA12005 NA12006 NA12043 NA12044 NA12045 NA12046 NA12058 NA12144 NA12154 NA12155 NA12156 NA12234 NA12249 NA12272 NA12273 NA12275 NA12282 NA12283 NA12286 NA12287 NA12340 NA12341 NA12342 NA12347 NA12348 NA12383 NA12399 NA12400 NA12413 NA12414 NA12489 NA12546 NA12716 NA12717 NA12718 NA12748 NA12749 NA12750 NA12751 NA12760 NA12761 NA12762 NA12763 NA12775 NA12776 NA12777 NA12778 NA12812 NA12813 NA12814 NA12815 NA12827 NA12828 NA12829 NA12830 NA12842 NA12843 NA12872 NA12873 NA12874 NA12878 NA12889 NA12890
# REGION  2       136000253       136999612
# 136000253       CTTTTTCTTCTTTTTTTTTTTTTTTTTCTTTTTTTTTTTTTTTTTTTTTTTTTTTTCTTTTTTTTTTTTTTCTTTTTTTCTTTTTTTTTTTTTTTTTTT
# 136000304       GTTTTTGTTGTTTTTTTTTTTTTTTTTGTTTTTTTTTTTTTTTTTTTTTTTTTTTTGTTTTTTTTTTTTTTGTTTTTTTGTTTTTTTTTTTTTTTTTTT
# 136000500       TCCCCCTCCTCCCCCCCCCCCCCCCCCTCCCCCCCCCCCCCCCCCCCCCCCCCCCCTCCCCCCCCCCCCCCTCCCCCCCTCCCCCCCCCCCCCCCCCCC
# 136000956       GGGGGGGGGGGGGGGGGGGGAGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
# 136001215       GTTTTTGTTGTTTTTTTTTTTTTTTTTGTTTTTTTTTTTTTTTTTTTTTTTTTTTTGTTTTTTTTTTTTTTGTTTTTTTGTTTTTTTTTTTTTTTTTTT
# 136001295       CGGGGGCGGCGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGCGGGGGGGCGGGGGGGGGGGGGGGGGGG
# 136002081       CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
